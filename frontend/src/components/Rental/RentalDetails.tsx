import React, { useState, useEffect } from 'react';
import { useParams } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { usePermissions } from '../../hooks/usePermissions';
import { RentalResponse } from '../../types';
import { rentalApi } from '../../services/api';
import './RentalDetails.css';

const RentalDetails: React.FC = () => {
  const { rentalId } = useParams<{ rentalId: string }>();
  const { user } = useAuth();
  const { canConfirmRentals } = usePermissions();
  const [rental, setRental] = useState<RentalResponse | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [confirm, setConfirm] = useState(false);
  const [cancelling, setCancelling] = useState(false);

  useEffect(() => {
    const fetchRental = async () => {
      if (!rentalId) {
        setError('ID –∞—Ä–µ–Ω–¥—ã –Ω–µ —É–∫–∞–∑–∞–Ω');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        const rentalData = await rentalApi.getById(parseInt(rentalId));
        setRental(rentalData);
      } catch (error: any) {
        setError(error.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω–¥—ã');
      } finally {
        setLoading(false);
      }
    };

    fetchRental();
  }, [rentalId]);

  const handleConfirm = async () => {
    if (!rental || !canConfirmRentals()) {
      alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã');
      return;
    }

    try {
      setConfirm(true);
      await rentalApi.confirm(rental.id);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ
      setRental({
        ...rental,
        status: 'CONFIRMED'
      });
      
      alert('–ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
    } catch (error: any) {
      alert(error.response?.data?.message || '–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã');
    } finally {
      setConfirm(false);
    }
  };

  const handleCancel = async () => {
    if (!rental) return;

    if (!window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∞—Ä–µ–Ω–¥—É?')) {
      return;
    }

    try {
      setCancelling(true);
      await rentalApi.cancel(rental.id);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ–∫–∞–ª—å–Ω–æ
      setRental({
        ...rental,
        status: 'CANCELLED'
      });
      
      alert('–ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞!');
    } catch (error: any) {
      alert(error.response?.data?.message || '–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –∞—Ä–µ–Ω–¥—ã');
    } finally {
      setCancelling(false);
    }
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    return date.toLocaleDateString('ru-RU', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  const formatPrice = (price: number) => {
    return new Intl.NumberFormat('ru-RU', {
      style: 'currency',
      currency: 'RUB'
    }).format(price);
  };

  const getStatusBadge = (status: string) => {
    const statusConfig = {
      'PENDING': { label: '–û–∂–∏–¥–∞–µ—Ç', className: 'status-pending' },
      'CONFIRMED': { label: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', className: 'status-confirmed' },
      'IN_PROGRESS': { label: '–í –ø—Ä–æ—Ü–µ—Å—Å–µ', className: 'status-in-progress' },
      'COMPLETED': { label: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', className: 'status-completed' },
      'CANCELLED': { label: '–û—Ç–º–µ–Ω–µ–Ω–∞', className: 'status-cancelled' },
    };

    const config = statusConfig[status as keyof typeof statusConfig] || 
                  { label: status, className: 'status-unknown' };

    return (
      <span className={`status-badge ${config.className}`}>
        {config.label}
      </span>
    );
  };

  if (loading) {
    return (
      <div className="loading">
        <div className="spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ä–µ–Ω–¥—ã...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="error-container">
        <div className="error-message">
          <h2>–û—à–∏–±–∫–∞</h2>
          <p>{error}</p>
        </div>
      </div>
    );
  }

  if (!rental) {
    return (
      <div className="error-container">
        <div className="error-message">
          <h2>–ê—Ä–µ–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h2>
          <p>–ê—Ä–µ–Ω–¥–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</p>
        </div>
      </div>
    );
  }

  return (
    <div className="rental-details">
      <div className="rental-header">
        <div className="rental-title">
          <h1>–ê—Ä–µ–Ω–¥–∞ #{rental.id}</h1>
          {getStatusBadge(rental.status)}
        </div>
        
        <div className="rental-actions">
          {rental.status === 'PENDING' && canConfirmRentals() && (
            <button
              onClick={handleConfirm}
              disabled={confirm}
              className="btn btn-primary"
            >
              {confirm ? (
                <>
                  <div className="spinner small"></div>
                  –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é...
                </>
              ) : (
                <>
                  <span>‚úì</span>
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞—Ä–µ–Ω–¥—É
                </>
              )}
            </button>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã */}
          {(rental.status === 'PENDING' || rental.status === 'CONFIRMED') && (
            <button
              onClick={handleCancel}
              disabled={cancelling}
              className="btn btn-danger"
            >
              {cancelling ? (
                <>
                  <span className="spinner"></span>
                  –û—Ç–º–µ–Ω—è—é...
                </>
              ) : (
                <>
                  <span>‚úó</span>
                  –û—Ç–º–µ–Ω–∏—Ç—å –∞—Ä–µ–Ω–¥—É
                </>
              )}
            </button>
          )}
          
          {rental.status === 'PENDING' && !canConfirmRentals() && (
            <div className="status-info">
              <span className="info-icon">‚ÑπÔ∏è</span>
              –ê—Ä–µ–Ω–¥–∞ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—è
            </div>
          )}
        </div>
      </div>

      <div className="rental-content">
        <div className="rental-section">
          <h2>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
          <div className="info-grid">
            <div className="info-item">
              <label>ID –∞—Ä–µ–Ω–¥—ã:</label>
              <span>#{rental.id}</span>
            </div>
            
            <div className="info-item">
              <label>ID –ø—Ä–µ–¥–º–µ—Ç–∞:</label>
              <span>#{rental.itemId}</span>
            </div>
            
            <div className="info-item">
              <label>ID –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞:</label>
              <span>#{rental.renterId}</span>
            </div>
            
            <div className="info-item">
              <label>–°—Ç–∞—Ç—É—Å:</label>
              {getStatusBadge(rental.status)}
            </div>
          </div>
        </div>

        <div className="rental-section">
          <h2>–ü–µ—Ä–∏–æ–¥ –∞—Ä–µ–Ω–¥—ã</h2>
          <div className="date-range">
            <div className="date-item">
              <div className="date-icon">üìÖ</div>
              <div className="date-info">
                <label>–ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã:</label>
                <span>{formatDate(rental.startDate)}</span>
              </div>
            </div>
            
            <div className="date-separator">‚Üí</div>
            
            <div className="date-item">
              <div className="date-icon">üìÖ</div>
              <div className="date-info">
                <label>–û–∫–æ–Ω—á–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã:</label>
                <span>{formatDate(rental.endDate)}</span>
              </div>
            </div>
          </div>
        </div>

        <div className="rental-section">
          <h2>–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
          <div className="price-grid">
            <div className="price-card">
              <div className="price-icon">üí∞</div>
              <div className="price-info">
                <label>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</label>
                <span className="price-value">{formatPrice(rental.totalPrice)}</span>
              </div>
            </div>
            
            <div className="price-card">
              <div className="price-icon">üõ°Ô∏è</div>
              <div className="price-info">
                <label>–ó–∞–ª–æ–≥:</label>
                <span className="price-value">{formatPrice(rental.depositAmount)}</span>
              </div>
            </div>
            
            <div className="price-card total">
              <div className="price-icon">üí≥</div>
              <div className="price-info">
                <label>–ö –æ–ø–ª–∞—Ç–µ:</label>
                <span className="price-value total-value">
                  {formatPrice(rental.totalPrice + rental.depositAmount)}
                </span>
              </div>
            </div>
          </div>
        </div>

        <div className="rental-section">
          <h2>–î–µ–π—Å—Ç–≤–∏—è</h2>
          <div className="actions-grid">
            {canConfirmRentals() && (
              <button 
                className="action-btn"
                onClick={() => alert('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
              >
                <span className="action-icon">üë§</span>
                –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
              </button>
            )}
            
            <button 
              className="action-btn"
              onClick={() => alert('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
            >
              <span className="action-icon">üì¶</span>
              –î–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥–º–µ—Ç–∞
            </button>
            
            <button 
              className="action-btn"
              onClick={() => alert('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
            >
              <span className="action-icon">üí¨</span>
              {canConfirmRentals() ? '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–º' : '–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º'}
            </button>
            
            {rental.status === 'CONFIRMED' && canConfirmRentals() && (
              <button 
                className="action-btn danger"
                onClick={() => alert('–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')}
              >
                <span className="action-icon">‚ùå</span>
                –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞—Ä–µ–Ω–¥—É
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default RentalDetails;
