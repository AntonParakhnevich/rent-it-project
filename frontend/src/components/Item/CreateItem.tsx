import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import { ItemRequest } from '../../types';
import { itemApi } from '../../services/api';
import './CreateItem.css';

const CreateItem: React.FC = () => {
  const { user } = useAuth();
  const navigate = useNavigate();
  
  const [formData, setFormData] = useState<ItemRequest>({
    title: '',
    description: '',
    pricePerDay: 0,
    depositAmount: 0,
    category: 'OTHER',
    images: [],
    available: true,
    location: '',
    ownerId: user?.userId || 0
  });
  
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [imageUrls, setImageUrls] = useState<string>('');

  const categories = [
    { value: 'ELECTRONICS', label: '–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞', icon: 'üì±' },
    { value: 'TOOLS', label: '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã', icon: 'üîß' },
    { value: 'SPORTS', label: '–°–ø–æ—Ä—Ç –∏ –æ—Ç–¥—ã—Ö', icon: '‚öΩ' },
    { value: 'VEHICLES', label: '–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç', icon: 'üöó' },
    { value: 'BOOKS', label: '–ö–Ω–∏–≥–∏', icon: 'üìö' },
    { value: 'CLOTHING', label: '–û–¥–µ–∂–¥–∞', icon: 'üëï' },
    { value: 'HOME', label: '–î–æ–º –∏ –±—ã—Ç', icon: 'üè†' },
    { value: 'OTHER', label: '–î—Ä—É–≥–æ–µ', icon: 'üì¶' }
  ];

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    const { name, value, type } = e.target;
    
    setFormData(prev => ({
      ...prev,
      [name]: type === 'number' ? parseFloat(value) || 0 : 
              type === 'checkbox' ? (e.target as HTMLInputElement).checked : 
              value
    }));
  };

  const handleImageUrlsChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const urls = e.target.value;
    setImageUrls(urls);
    
    // –ü–∞—Ä—Å–∏–º URLs (–ø–æ —Å—Ç—Ä–æ–∫–∞–º –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
    const urlArray = urls
      .split(/[\n,]/)
      .map(url => url.trim())
      .filter(url => url.length > 0);
    
    setFormData(prev => ({
      ...prev,
      images: urlArray
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    if (!formData.title.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞');
      return;
    }

    if (!formData.description.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞');
      return;
    }

    if (formData.pricePerDay <= 0) {
      setError('–¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      return;
    }

    if (!formData.location.trim()) {
      setError('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ');
      return;
    }

    if (!user) {
      setError('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É');
      return;
    }

    try {
      setLoading(true);
      
      const itemData: ItemRequest = {
        ...formData,
        ownerId: user.userId
      };
      
      await itemApi.create(itemData);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É "–ú–æ–∏ –ø—Ä–µ–¥–º–µ—Ç—ã"
      navigate('/my-items');
    } catch (error: any) {
      setError(error.response?.data?.message || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞');
    } finally {
      setLoading(false);
    }
  };

  const selectedCategory = categories.find(cat => cat.value === formData.category);

  return (
    <div className="create-item">
      <div className="create-item-header">
        <h1>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç</h1>
        <p>–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ –¥–ª—è –∞—Ä–µ–Ω–¥—ã</p>
      </div>

      <form onSubmit={handleSubmit} className="create-item-form">
        <div className="form-section">
          <h2>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h2>
          
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="title" className="form-label">
                –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ *
              </label>
              <input
                type="text"
                id="title"
                name="title"
                className="form-input"
                value={formData.title}
                onChange={handleInputChange}
                placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: iPhone 15 Pro"
                disabled={loading}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="category" className="form-label">
                –ö–∞—Ç–µ–≥–æ—Ä–∏—è *
              </label>
              <div className="category-select-wrapper">
                <span className="category-icon">{selectedCategory?.icon}</span>
                <select
                  id="category"
                  name="category"
                  className="form-input category-select"
                  value={formData.category}
                  onChange={handleInputChange}
                  disabled={loading}
                  required
                >
                  {categories.map(category => (
                    <option key={category.value} value={category.value}>
                      {category.label}
                    </option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          <div className="form-group">
            <label htmlFor="description" className="form-label">
              –û–ø–∏—Å–∞–Ω–∏–µ *
            </label>
            <textarea
              id="description"
              name="description"
              className="form-input form-textarea"
              value={formData.description}
              onChange={handleInputChange}
              placeholder="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞, –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è..."
              disabled={loading}
              rows={4}
              required
            />
          </div>

          <div className="form-group">
            <label htmlFor="location" className="form-label">
              –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ *
            </label>
            <input
              type="text"
              id="location"
              name="location"
              className="form-input"
              value={formData.location}
              onChange={handleInputChange}
              placeholder="–ì–æ—Ä–æ–¥, —Ä–∞–π–æ–Ω –∏–ª–∏ –∞–¥—Ä–µ—Å"
              disabled={loading}
              required
            />
          </div>
        </div>

        <div className="form-section">
          <h2>–¶–µ–Ω—ã –∏ —É—Å–ª–æ–≤–∏—è</h2>
          
          <div className="form-row">
            <div className="form-group">
              <label htmlFor="pricePerDay" className="form-label">
                –¶–µ–Ω–∞ –∑–∞ –¥–µ–Ω—å (‚ÇΩ) *
              </label>
              <input
                type="number"
                id="pricePerDay"
                name="pricePerDay"
                className="form-input"
                value={formData.pricePerDay}
                onChange={handleInputChange}
                placeholder="1000"
                min="1"
                step="0.01"
                disabled={loading}
                required
              />
            </div>

            <div className="form-group">
              <label htmlFor="depositAmount" className="form-label">
                –ó–∞–ª–æ–≥ (‚ÇΩ)
              </label>
              <input
                type="number"
                id="depositAmount"
                name="depositAmount"
                className="form-input"
                value={formData.depositAmount}
                onChange={handleInputChange}
                placeholder="5000"
                min="0"
                step="0.01"
                disabled={loading}
              />
              <small className="form-hint">
                –ó–∞–ª–æ–≥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
              </small>
            </div>
          </div>

          <div className="form-group">
            <label className="checkbox-label">
              <input
                type="checkbox"
                name="available"
                checked={formData.available}
                onChange={handleInputChange}
                disabled={loading}
              />
              <span className="checkbox-custom"></span>
              –ü—Ä–µ–¥–º–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞—Ä–µ–Ω–¥—ã
            </label>
          </div>
        </div>

        <div className="form-section">
          <h2>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è</h2>
          
          <div className="form-group">
            <label htmlFor="images" className="form-label">
              URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            </label>
            <textarea
              id="images"
              className="form-input form-textarea"
              value={imageUrls}
              onChange={handleImageUrlsChange}
              placeholder="–í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–ø–æ –æ–¥–Ω–æ–π –Ω–∞ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"
              disabled={loading}
              rows={3}
            />
            <small className="form-hint">
              –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤
            </small>
          </div>

          {formData.images.length > 0 && (
            <div className="image-preview">
              <h4>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</h4>
              <div className="image-grid">
                {formData.images.map((url, index) => (
                  <div key={index} className="image-preview-item">
                    <img 
                      src={url} 
                      alt={`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}`}
                      onError={(e) => {
                        (e.target as HTMLImageElement).style.display = 'none';
                      }}
                    />
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {error && (
          <div className="error-message">
            {error}
          </div>
        )}

        <div className="form-actions">
          <button
            type="button"
            onClick={() => navigate('/my-items')}
            className="btn btn-secondary"
            disabled={loading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          
          <button
            type="submit"
            className="btn btn-primary"
            disabled={loading}
          >
            {loading ? (
              <>
                <div className="spinner small"></div>
                –°–æ–∑–¥–∞–Ω–∏–µ...
              </>
            ) : (
              '–°–æ–∑–¥–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç'
            )}
          </button>
        </div>
      </form>
    </div>
  );
};

export default CreateItem;
